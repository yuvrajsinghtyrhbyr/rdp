name: Ubuntu RDP/Tailscale

on:
  workflow_dispatch:
    inputs:
      ts_tailnet:
        description: "Tailscale tailnet (e.g. you@gmail.com)"
        required: true
      ts_api_key:
        description: "Tailscale API key (device admin)"
        required: true
      ts_authkey:
        description: "Tailscale auth key (reusable/ephemeral)"
        required: true
      runtime_minutes:
        description: "Runtime in minutes (max 360)"
        required: false
        default: "120"

jobs:
  rdp:
    runs-on: ubuntu-22.04
    timeout-minutes: 370
    steps:
      - name: Update & install prerequisites
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y curl gnupg lsb-release jq

      - name: PURGE old Tailscale nodes containing 'bullet'
        continue-on-error: true
        run: |
          echo "Cleaning up old nodes..."
          devices=$(curl -s -H "Authorization: Bearer ${{ github.event.inputs.ts_api_key }}" \
            "https://api.tailscale.com/api/v2/tailnet/${{ github.event.inputs.ts_tailnet }}/devices" \
            | jq -r '.devices[]? | select(.hostname?|test("bullet")) | .id' 2>/dev/null || echo "")
          
          if [ -n "$devices" ]; then
            echo "$devices" | xargs -r -n1 -I{} curl -s -X DELETE \
              -H "Authorization: Bearer ${{ github.event.inputs.ts_api_key }}" \
              "https://api.tailscale.com/api/v2/device/{}"
            echo "Cleaned up old nodes"
          else
            echo "No old nodes to clean up"
          fi

      - name: Install Tailscale on Ubuntu
        run: |
          curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.noarmor.gpg \
            | sudo tee /usr/share/keyrings/tailscale-archive-keyring.gpg > /dev/null
          
          curl -fsSL https://pkgs.tailscale.com/stable/ubuntu/jammy.tailscale-keyring.list \
            | sudo tee /etc/apt/sources.list.d/tailscale.list
          
          sudo apt-get update -qq
          sudo apt-get install -y tailscale
          sudo systemctl enable --now tailscaled
          
          sleep 5

      - name: Tailscale up (hostname=bullet) + show details
        run: |
          echo "Connecting to Tailscale..."
          sudo tailscale up --authkey "${{ github.event.inputs.ts_authkey }}" \
            --hostname "bullet-$(date +%s)" \
            --accept-routes \
            --accept-dns=false \
            --timeout=30s
          
          echo "✅ Tailscale connected successfully!"
          echo ""
          echo "=== Tailscale Status ==="
          sudo tailscale status
          echo ""
          echo "=== Network Details ==="
          echo "Tailscale IPv4: $(sudo tailscale ip -4)"
          echo "Tailscale IPv6: $(sudo tailscale ip -6 2>/dev/null || echo 'Not available')"
          echo ""
          echo "=== System Info ==="
          echo "Hostname: $(hostname)"
          echo "External IP: $(curl -s ifconfig.me || echo 'Unable to fetch')"

      - name: Setup SSH Access for Termius
        run: |
          echo "Setting up SSH access..."
          
          sudo systemctl enable ssh
          sudo systemctl start ssh
          
          sudo useradd -m -s /bin/bash vpsuser
          echo "vpsuser:VPS@123456" | sudo chpasswd
          sudo usermod -aG sudo vpsuser
          
          sudo mkdir -p /home/vpsuser/.ssh
          sudo chmod 700 /home/vpsuser/.ssh
          
          echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQCxwyupFObqMZ377b0qim9ayYZv4mTZCtEhfyt2U4bMrEVMHiRHFToPm2FMISI5D2Yv+0uoGgBg1gq7bPHSYajeNtabvi5/lAO9GG9HeokRR3VO/zodB4OeOY7PL5q76ZahEhAvCun9GKQURbgvMPAvsqgIaDG3aBXIdkD1upM3rHerECCd36ayUl15lK0eTD0yURw5SGOmOwB4n4t2FgJHWUtzlhJc+UaUSByAAfy2z4fnRiOBNE8oE/kJVs9agPHobTzEOZtC379rjv8ZxvGKQHiWNBwBazqVLfpk03qStFjiqqOrEMnC/m+zq4/fQFeKGc1fpxWoxJ+1blrQ8ZMr Generated By Termius" | sudo tee /home/vpsuser/.ssh/authorized_keys
          
          sudo chmod 600 /home/vpsuser/.ssh/authorized_keys
          sudo chown -R vpsuser:vpsuser /home/vpsuser/.ssh
          
          sudo sed -i 's/#PasswordAuthentication yes/PasswordAuthentication yes/' /etc/ssh/sshd_config
          sudo sed -i 's/PasswordAuthentication no/PasswordAuthentication yes/' /etc/ssh/sshd_config
          sudo sed -i 's/#PermitRootLogin prohibit-password/PermitRootLogin no/' /etc/ssh/sshd_config
          sudo sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config
          
          sudo systemctl restart ssh
          
          sudo apt-get update -qq
          sudo apt-get install -y htop neofetch tree git nano vim curl wget unzip \
            screen iptables build-essential lz4 jq make gcc automake autoconf \
            tmux nvme-cli libgbm1 pkg-config libssl-dev libleveldb-dev tar clang \
            bsdmainutils ncdu python3 python3-pip python3-venv python3-dev
          
          echo "Installing Node.js 22.x..."
          curl -fsSL https://deb.nodesource.com/setup_22.x | sudo bash -
          sudo apt install -y nodejs
          
          sudo npm install -g yarn
          
          curl -o- -L https://yarnpkg.com/install.sh | bash
          
          sudo -u vpsuser bash -c '
            echo "export PATH=\"\$HOME/.yarn/bin:\$HOME/.config/yarn/global/node_modules/.bin:\$PATH\"" >> /home/vpsuser/.bashrc
            echo "source ~/.bashrc" >> /home/vpsuser/.bash_profile
          '
          
          echo "✅ SSH setup completed!"
          echo ""
          echo "=== Termius Connection Details ==="
          echo "Host/IP: $(sudo tailscale ip -4)"
          echo "Port: 22"
          echo "Username: vpsuser"
          echo "Password: VPS@123456 (backup - key auth preferred)"
          echo ""
          echo "🔑 SSH Key Authentication: ENABLED"
          echo "📱 Your Termius key should work automatically!"

      - name: Setup Node.js Environment & RL-Swarm Prerequisites
        run: |
          echo "Setting up development environment for vpsuser..."
          
          sudo -u vpsuser bash -c '
            cd /home/vpsuser
            
            echo "=== Environment Verification ==="
            echo "Node.js: $(node -v)"
            echo "NPM: $(npm -v)"
            echo "Python: $(python3 --version)"
            echo "Git: $(git --version)"
            echo ""
            
            mkdir -p ~/projects
            cd ~/projects
            
            echo "📦 Cloning rl-swarm repository..."
            git clone https://github.com/gensyn-ai/rl-swarm/ || echo "Repository already exists or clone failed"
            
            cat > ~/setup_swarm.sh << "EOF"
#!/bin/bash
echo "🚀 RL-Swarm Setup Helper"
echo "========================"
echo ""
echo "📁 Navigate to project:"
echo "cd ~/projects/rl-swarm"
echo ""
echo "🔧 Setup Python virtual environment:"
echo "python3 -m venv .venv"
echo "source .venv/bin/activate"
echo ""
echo "▶️  Run swarm:"
echo "./run_rl_swarm.sh"
echo ""
echo "📋 Quick commands:"
echo "screen -S swarm    # Create background session"
echo "screen -r swarm    # Reconnect to session"
echo "Ctrl+A then D      # Detach from screen"
EOF
            chmod +x ~/setup_swarm.sh
            
            cat > ~/start_swarm_screen.sh << "EOF"
#!/bin/bash
cd ~/projects/rl-swarm
screen -S swarm -d -m bash -c "python3 -m venv .venv && source .venv/bin/activate && echo Ready for swarm setup! && bash"
echo "✅ Screen session created! Connect with: screen -r swarm"
EOF
            chmod +x ~/start_swarm_screen.sh
            
            echo "✅ Development environment ready!"
            echo ""
            echo "📋 Available helper scripts:"
            echo "   ~/setup_swarm.sh        - Setup instructions"
            echo "   ~/start_swarm_screen.sh - Start screen session"
          '

      - name: System Information
        run: |
          echo "=== Ubuntu System Information ==="
          lsb_release -a
          echo ""
          echo "=== Current User ==="
          echo "Running as: $(whoami)"
          echo "Home directory: $HOME"
          echo ""
          echo "=== Available Resources ==="
          echo "CPU: $(nproc) cores"
          echo "Memory: $(free -h | grep Mem | awk '{print $2}')"
          echo "Disk: $(df -h / | tail -1 | awk '{print $4}') free"
          echo ""
          echo "=== Network Interfaces ==="
          ip addr show | grep -E "inet |tailscale"
          echo ""
          echo "✅ System is ready!"

      - name: Keep alive for specified runtime
        run: |
          runtime=${{ github.event.inputs.runtime_minutes }}
          runtime=${runtime:-120}
          
          echo "🕒 Keeping workflow alive for $runtime minutes..."
          echo "⚠️  Do not close this workflow while using the system!"
          echo ""
          echo "=== Access Information ==="
          echo "🖥️  SSH Connection Details:"
          echo "   Host: $(sudo tailscale ip -4)"
          echo "   Port: 22"
          echo "   Username: vpsuser"
          echo "   Password: VPS@123456 (backup - key auth preferred)"
          echo ""
          echo "🔑 SSH Key Authentication: ACTIVE"
          echo "🚀 Node.js Environment: READY"
          echo "📦 RL-Swarm Repository: CLONED"
          echo ""
          echo "📱 Termius App Setup:"
          echo "   1. Open Termius app"
          echo "   2. Add new host: $(sudo tailscale ip -4)"
          echo "   3. Set username: vpsuser"
          echo "   4. Your SSH key should auto-authenticate!"
          echo "   5. Fallback password: VPS@123456"
          echo ""
          echo "🛠️  Ready Commands After SSH:"
          echo "   ./setup_swarm.sh           # View setup instructions"
          echo "   ./start_swarm_screen.sh    # Start screen session"
          echo "   cd ~/projects/rl-swarm     # Go to project folder"
          echo "   screen -S swarm            # Manual screen session"
          echo ""
          
          end_time=$(($(date +%s) + runtime * 60))
          while [ $(date +%s) -lt $end_time ]; do
            remaining=$((end_time - $(date +%s)))
            hours=$((remaining / 3600))
            minutes=$(((remaining % 3600) / 60))
            echo "⏱️  Time remaining: ${hours}h ${minutes}m ($(date))"
            sleep 300
          done
          
          echo "🔴 Runtime expired. Workflow ending..."

      - name: Cleanup on completion
        if: always()
        continue-on-error: true
        run: |
          echo "Cleaning up Tailscale connection..."
          sudo tailscale down || true
          echo "✅ Cleanup completed"
